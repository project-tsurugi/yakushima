name: Yakushima-CI

on:
  push:
  pull_request:
  workflow_dispatch:
    inputs:
      os:
        type: string
        default: 'ubuntu-22.04'
      cmake_build_option:
        type: string
        default: ''

jobs:
  Test:
    runs-on: [self-hosted, docker]
    permissions:
      checks: write
    timeout-minutes: 30
    container:
      image: ghcr.io/project-tsurugi/tsurugi-ci:${{ inputs.os || 'ubuntu-22.04' }}
      volumes:
        - ${{ vars.ccache_dir }}:${{ vars.ccache_dir }}
    defaults:
      run:
        shell: bash
    env:
      CCACHE_CONFIGPATH: ${{ vars.ccache_dir }}/ccache.conf
      CCACHE_DIR: ${{ vars.ccache_dir }}/${{ inputs.os || 'ubuntu-22.04' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: CMake_Build_Debug
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DPERFORMANCE_TOOLS=OFF ${{ inputs.cmake_build_option }} ..
          cmake --build . --target all --clean-first

      - name: CMake_Build_Release
        run: |
          mkdir build_release
          cd build_release
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DBUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DPERFORMANCE_TOOLS=OFF ${{ inputs.cmake_build_option }} ..
          cmake --build . --target all --clean-first

      - name: CTest_Debug
        env:
          GTEST_OUTPUT: xml
          ASAN_OPTIONS: detect_stack_use_after_return=true
        run: |
          cd build
          ctest --verbose --timeout 100 -j 16

      - name: CTest_Release
        env:
          GTEST_OUTPUT: xml
          ASAN_OPTIONS: detect_stack_use_after_return=true
        run: |
          cd build_release
          ctest --verbose --timeout 100 -j 16

      - name: Verify
        uses: project-tsurugi/tsurugi-annotations-action@v1
        if: always()

  Analysis:
    runs-on: [self-hosted, docker]
    permissions:
      checks: write
    timeout-minutes: 30
    container:
      image: ghcr.io/project-tsurugi/tsurugi-ci:almalinux-latest
      volumes:
        - ${{ vars.ccache_dir }}:${{ vars.ccache_dir }}
    defaults:
      run:
        shell: bash
    env:
      CCACHE_CONFIGPATH: ${{ vars.ccache_dir }}/ccache.conf
      CCACHE_DIR: ${{ vars.ccache_dir }}/almalinux-latest
      CC: clang
      CXX: clang++

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: CMake_Build
        run: |
          mkdir build
          cd build
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DBUILD_BENCHMARK=ON -DBUILD_TESTS=ON -DBUILD_STRICT=OFF -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/.local -DPERFORMANCE_TOOLS=OFF ${{ inputs.cmake_build_option }} ..
          cmake --build . --target all --clean-first

      - name: Clang-Tidy
        run: |
          #python3 tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -extra-arg=-fsized-deallocation -header-filter=$(pwd)'/(include|src|examples|bench)/.*\.h$' $(pwd)'/(src|examples|bench|test)/.*' 2>&1 | awk '!a[$0]++{print > "build/clang-tidy.log"}'
          python3 tools/bin/run-clang-tidy.py -quiet -export-fixes=build/clang-tidy-fix.yaml -p build -extra-arg=-Wno-unknown-warning-option -extra-arg=-fsized-deallocation -header-filter=$(pwd)'/(include|src|examples|bench)/.*\.h$' $(pwd)'/test/version.*' 2>&1 | awk '!a[$0]++{print > "build/clang-tidy.log"}'

      - name: Doxygen
        run: |
          cd build
          ninja doxygen 2> >(tee doxygen-error.log)

      - name: Verify
        uses: project-tsurugi/tsurugi-annotations-action@v1
        if: always()
